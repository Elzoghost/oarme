import unittest
from src.vulnerability import check_sql_injection, check_xss

class TestVulnerability(unittest.TestCase):

    def test_check_sql_injection(self):
        # Cas positif : chaîne contenant une injection SQL
        self.assertTrue(check_sql_injection("SELECT * FROM users;"))
        self.assertTrue(check_sql_injection("DROP TABLE users;"))
        self.assertTrue(check_sql_injection("'; DELETE FROM users; --"))

        # Cas négatif : chaîne normale
        self.assertFalse(check_sql_injection("Hello, world!"))
        self.assertFalse(check_sql_injection("User input without SQL."))

    def check_xss(input_string: str) -> bool:
        """
        Vérifie si une chaîne contient une tentative d'attaque XSS.

        :param input_string: Chaîne à vérifier.
        :return: True si une attaque XSS est détectée, False sinon.
        """
        # Exemple de motif simple pour détecter une attaque XSS
        xss_patterns = [
            r"<script\b",
            r"</script\b",
            r"<img\b",
            r"<svg\b",
            r"\bonerror\b",
            r"\bonload\b",
        ]
        for pattern in xss_patterns:
            if re.search(pattern, input_string, re.IGNORECASE):
                return True
        return False


if __name__ == '__main__':
    unittest.main()
